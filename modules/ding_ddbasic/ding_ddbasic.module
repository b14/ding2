<?php

/**
 * @file
 * Ding DDBasic.
 */

/**
 * Implements hook_entity_info_alter().
 */
function ding_ddbasic_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['alternative_layout_full'] = array(
    'label' => t('Alternative layout full'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_ding_entity_buttons().
 *
 * - Add other formats button.
 */
function ding_ddbasic_ding_entity_buttons($type, $entity) {
  $result = array();

  switch ($type) {
    case 'ding_entity':
      $collection = ting_collection_load($entity->id);
      if (count($collection->types) > 1) {
        $result[] = array(
          '#theme' => 'link',
          '#text' => t('Other formats'),
          '#path' => '#',
          '#options' => array(
            'attributes' => array(
              'class' => array('action-button', 'other-formats'),
            ),
            'html' => FALSE,
            'external' => TRUE,
          ),
        );
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_ddbasic_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_menu_alter().
 *
 * - Move around the menu items in the user menu.
 */
function ding_ddbasic_menu_alter(&$items) {
  // Primary.
  $items['user/%pm_arg/status']['type'] = MENU_CALLBACK;
  $items['user/%pm_arg/status']['page callback'] = 'ding_ddbasic_redirect_user_menu_callback';
  $items['user/%pm_arg/status']['page arguments'] = array('user/%pm_arg/status-loans');

  // Loans.
  $items['user/%pm_arg/status-loans'] = $items['user/%pm_arg/status/loans'];
  $items['user/%pm_arg/status-loans']['type'] = MENU_LOCAL_TASK;

  $items['user/%pm_arg/status/loans']['type'] = MENU_CALLBACK;
  $items['user/%pm_arg/status/loans']['page callback'] = 'ding_ddbasic_redirect_user_menu_callback';
  $items['user/%pm_arg/status/loans']['page arguments'] = array('user/%pm_arg/status-loans');

  // Depts.
  $items['user/%pm_arg/status-debts'] = $items['user/%pm_arg/status/debts'];
  $items['user/%pm_arg/status-debts']['type'] = MENU_LOCAL_TASK;

  $items['user/%pm_arg/status/debts']['type'] = MENU_CALLBACK;
  $items['user/%pm_arg/status/debts']['page callback'] = 'ding_ddbasic_redirect_user_menu_callback';
  $items['user/%pm_arg/status/debts']['page arguments'] = array('user/%pm_arg/status-debts');

  // Reservations.
  $items['user/%pm_arg/status-reservations'] = $items['user/%pm_arg/status/reservations'];
  $items['user/%pm_arg/status-reservations']['type'] = MENU_LOCAL_TASK;

  $items['user/%pm_arg/status/reservations']['type'] = MENU_CALLBACK;
  $items['user/%pm_arg/status/reservations']['page callback'] = 'ding_ddbasic_redirect_user_menu_callback';
  $items['user/%pm_arg/status/reservations']['page arguments'] = array('user/%pm_arg/status-reservations');

  // Change names of edit and view.
  $items['user/%user/edit']['title'] = t('User profile');
  $items['user/%user/view']['title'] = t('My account');

  // Set the order of the user menu.
  $items['user/%user/view']['weight'] = 1;
  $items['user/%user/edit']['weight'] = 2;
  $items['user/%pm_arg/status-loans']['weight'] = 3;
  $items['user/%pm_arg/status-reservations']['weight'] = 4;
  $items['user/%pm_arg/status-debts']['weight'] = 5;
  $items['user/%pm_arg/bookmarks']['weight'] = 6;
}

/**
 * Redirect the old user menu items to the new ones.
 */
function ding_ddbasic_redirect_user_menu_callback($redirect) {
  drupal_goto(str_replace('%pm_arg', arg(1), $redirect));
}

/**
 * Implememnts hook_form_FORM_ID_alter().
 */
function ding_ddbasic_form_ting_search_admin_settings_alter(&$form, &$form_state) {
  // TODO: Remove the variable in an unintall function.
  $form['ting_search']['ting_search_extend_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Extend search form.'),
    '#default_value' => variable_get('ting_search_extend_form', FALSE),
  );
}

/**
 * Implememnts hook_form_FORM_ID_alter().
 */
function ding_ddbasic_form_ding_frontpage_admin_settings_alter(&$form, &$form_state) {
  // TODO: Remove the variables in an unintall function.
  $form['ding_frontpage']['ding_frontpage_events'] = array(
    '#type' => 'fieldset',
    '#title' => t('Events'),
  );
  $form['ding_frontpage']['ding_frontpage_events']['ding_frontpage_events_count'] = array(
    '#type' => 'select',
    '#title' => t('Count'),
    '#options' => array(
      '6' => '3 - 6',
      '12' => '6 - 12',
      '18' => '9 - 18',
    ),
    '#default_value' => variable_get('ding_frontpage_events_count', 6),
  );
  $form['ding_frontpage']['ding_frontpage_events']['ding_frontpage_events_promoted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only promoted events'),
    '#default_value' => variable_get('ding_frontpage_events_promoted', TRUE),
  );
}

/**
 * Implements hook_pre_build().
 */
function ding_ddbasic_views_pre_build(&$view) {
  switch ($view->name . ' ' . $view->current_display) {
    case 'ding_event ding_event_list_frontpage':

      if (variable_get('ding_frontpage_events_promoted', TRUE) == FALSE) {
        unset($view->filter['promote']);
      }

      $view->display_handler->display->display_options['pager']['options']['items_per_page'] = variable_get('ding_frontpage_events_count', 6);
      break;

    case 'ding_event ding_event_list':
      $view->display_handler->options['pager']['options']['items_per_page'] = ddbasic_theme_setting('number_of_events', 10);

      if (ddbasic_theme_setting('group_events_by_date', FALSE)) {
        $view->field['field_ding_event_date_1']->options['settings']['format_type'] = 'ding_date_only_version2';
      }
      break;

    case 'ding_news ding_news_list':
      $view->display_handler->options['pager']['options']['items_per_page'] = ddbasic_theme_setting('number_of_news', 10);

      break;
  }
}

/**
 * Is the search form extended on the current page.
 */
function ding_ddbasic_is_search_form_extended() {
  return menu_get_item()['path'] !== 'search/ting/%';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_ddbasic_form_search_block_form_alter(&$form, &$form_state) {
  if (ding_ddbasic_is_ting_search_extend_form()) {
    $form['search_field'] = array(
      '#type' => 'container',
      '#weight' => 5,
      '#attributes' => array('class' => array('search-field')),
      'search_block_form' => $form['search_block_form'],
      'actions' => $form['actions'],
    );
    unset($form['search_block_form'], $form['actions']);

    $form['search_extended_open_button'] = array(
      '#markup' => '<a href="#" class="search-extended-button">Search extended button</a>',
    );

    if (ding_ddbasic_is_search_form_extended()) {
      $form['material_type'] = array(
        '#type' => 'select',
        '#options' => array('' => t('Select material')) + drupal_map_assoc(array_keys(_ting_fetch_well_types())),
        '#weight' => 10,
        '#default_value' => 'bog',
      );
    }

    array_unshift($form['#submit'], 'ding_ddbasic_form_search_block_form_submit');
  }
}

/**
 * Prepended submit action for form_search_block_form().
 */
function ding_ddbasic_form_search_block_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['material_type'])) {
    if (!empty($form_state['values']['search_block_form'])) {
      $form_state['extra_query_parameters']['facets'][] = 'facet.type:' . $form_state['values']['material_type'];
    }
    else {
      $form_state['values']['search_block_form'] = 'facet.type="' . $form_state['values']['material_type'] . '"';
      $form_state['extra_query_parameters']['sort'] = 'date_descending';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ding_ddbasic_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form_state['view']->name == 'ding_event' && $form_state['view']->current_display == 'ding_event_list') {

    // Add placeholder to title field.
    if (!empty($form['title'])) {
      $form['title']['#attributes']['placeholder'] = t('Search for an event');
    }

    // Hide reset button if there's nothing to reset.
    foreach ($form_state['view']->exposed_input as $exposed_input) {
      $input = $exposed_input;
    }
    if (empty($input)) {
      $form['reset']['#access'] = FALSE;
    }
  }
}

/**
 * Date popup.
 */
function ding_ddbasic_date_popup_process_alter(&$element, &$form_state, $context) {
  // Add placeholder in event view.
  if ($form_state['view']->name == 'ding_event' && $form_state['view']->current_display == 'ding_event_list') {
    $element['date']['#attributes']['placeholder'] = t('Select a date');
  }
}

/**
 * Implements hook_form_alter().
 */
function ding_ddbasic_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    // Make changes to the theme_settings.
    // This alter is placed in the ding_ddbasic module to make sure it's run
    // after the color module (see  ding_ddbasic_module_implements_alter).
    case 'system_theme_settings':
      if (isset($form_state['build_info']['args'][0]) && $form_state['build_info']['args'][0] === 'ddbasic') {
        $form['color']['palette']['primary']['#description'] = t('Is used e.g. as background-color for the main menu, checkboxes and radio-buttons');
        $form['color']['palette']['secondary']['#description'] = t('Is used e.g. as background-color for the log-in button, read-more buttons');

        // Limit the choices on text colors.
        $default_value = '#000000';
        switch ($form['color']['palette']['text']['#default_value']) {
          case $form['color']['palette']['primary']['#default_value']:
            $default_value = 'primary';
            break;

          case $form['color']['palette']['secondary']['#default_value']:
            $default_value = 'secondary';
            break;
        }

        $form['color']['palette']['text'] = array(
          '#description' => t('Choose a color that is legible on a white background') . '<br />' . t('Is used e.g. for text-links and panel headers'),
          '#type' => 'select',
          '#options' => array(
            // The primary and secondary value is handled in the theme_settings
            // submit callback, in the ddbasic theme.
            'primary' => t('Primary'),
            'secondary' => t('Secondary'),
            '#000000' => t('Black'),
          ),
          '#size' => '1',
          '#default_value' => $default_value,
        ) + $form['color']['palette']['text'];

        $form['color']['palette']['text_on_primary'] = array(
          '#description' => t('Choose a color that is legible on the primary color'),
          '#type' => 'select',
          '#options' => array(
            '#ffffff' => t('White'),
            '#00000' => t('Black'),
          ),
          '#size' => '1',
        ) + $form['color']['palette']['text_on_primary'];

        $form['color']['palette']['text_on_secondary'] = array(
          '#description' => t('Choose a color that is legible on the secondary color'),
          '#type' => 'select',
          '#options' => array(
            '#ffffff' => t('White'),
            '#00000' => t('Black'),
          ),
          '#size' => '1',
        ) + $form['color']['palette']['text_on_secondary'];
      }
      break;
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ding_ddbasic_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, array('form_alter', 'menu_alter'))) {
    $group = $implementations['ding_ddbasic'];
    unset($implementations['ding_ddbasic']);
    $implementations['ding_ddbasic'] = $group;
  }
}

/**
 * Wrapper for theme_get_settings(), with a default argument.
 */
function ddbasic_theme_setting($name, $default = FALSE) {
  $value = theme_get_setting($name, 'ddbasic');

  if (empty($value)) {
    $value = $default;
  }

  return $value;
}

/**
 * Is ting search form extended.
 */
function ding_ddbasic_is_ting_search_extend_form() {
  return variable_get('ting_search_extend_form', FALSE);
}

/**
 * Colorize CSS files.
 */
function ding_ddbasic_colorize_css($cssfiles, $colors = array()) {
  foreach ($cssfiles as $cssfile) {
    file_put_contents($cssfile, strtr(file_get_contents($cssfile), array(
      '#4300fF' => '#' . $colors['primary'],
      '#fFaaaa' => '#' . $colors['secondary'],

      '#4301fF' => '#' . $colors['text'],
      '#fFfFf9' => '#' . $colors['text_on_primary'],
      '#0000aA' => '#' . $colors['text_on_secondary'],
    )));
  }
}
